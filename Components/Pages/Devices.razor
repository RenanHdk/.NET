@page "/device"
@using inovanex.app.Models

@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@using inovanex.app.Services
@using Microsoft.AspNetCore.Authorization


@attribute [Authorize]

<div class="page">
    <div class="main"
        style="background-color: var(--bs-body-bg); display: flex; flex-direction:row; justify-content:space-around; flex-wrap:wrap">
        <div class="card" style="width: 10rem; border-radius: 20px;">
            <div class="card-body">
                <div style="display: flex; flex-direction: row; justify-content:space-between">
                    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="blue"
                        class="bi bi-lightbulb-fill" viewBox="0 0 16 16">
                        <path
                            d="M2 6a6 6 0 1 1 10.174 4.31c-.203.196-.359.4-.453.619l-.762 1.769A.5.5 0 0 1 10.5 13h-5a.5.5 0 0 1-.46-.302l-.761-1.77a2 2 0 0 0-.453-.618A5.98 5.98 0 0 1 2 6m3 8.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1l-.224.447a1 1 0 0 1-.894.553H6.618a1 1 0 0 1-.894-.553L5.5 15a.5.5 0 0 1-.5-.5" />
                    </svg>
                    <div>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="blue" class="bi bi-wifi"
                            viewBox="0 0 16 16">
                            <path
                                d="M15.384 6.115a.485.485 0 0 0-.047-.736A12.44 12.44 0 0 0 8 3C5.259 3 2.723 3.882.663 5.379a.485.485 0 0 0-.048.736.52.52 0 0 0 .668.05A11.45 11.45 0 0 1 8 4c2.507 0 4.827.802 6.716 2.164.205.148.49.13.668-.049" />
                            <path
                                d="M13.229 8.271a.482.482 0 0 0-.063-.745A9.46 9.46 0 0 0 8 6c-1.905 0-3.68.56-5.166 1.526a.48.48 0 0 0-.063.745.525.525 0 0 0 .652.065A8.46 8.46 0 0 1 8 7a8.46 8.46 0 0 1 4.576 1.336c.206.132.48.108.653-.065m-2.183 2.183c.226-.226.185-.605-.1-.75A6.5 6.5 0 0 0 8 9c-1.06 0-2.062.254-2.946.704-.285.145-.326.524-.1.75l.015.015c.16.16.407.19.611.09A5.5 5.5 0 0 1 8 10c.868 0 1.69.201 2.42.56.203.1.45.07.61-.091zM9.06 12.44c.196-.196.198-.52-.04-.66A2 2 0 0 0 8 11.5a2 2 0 0 0-1.02.28c-.238.14-.236.464-.04.66l.706.706a.5.5 0 0 0 .707 0l.707-.707z" />
                        </svg>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="blue"
                            class="bi bi-three-dots" viewBox="0 0 16 16">
                            <path
                                d="M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3" />
                        </svg>
                    </div>
                </div>

                <div style="margin-top: 25%;">
                    <p style="font-weight: bold; font-size:18px; margin-bottom: 0;">asdsadasdsa</p>
                    <p style="font-size:14px; margin-bottom: 0;">Off</p>
                </div>

            </div>
        </div>
        @if (cd != null)
        {
            foreach (Device c in cd)
            {
                <DeviceComponent Title=@c.title Status=@c.status WiFi=@c.wifi />
            }
        }
    </div>
</div>

@code {
    public List<Device>? cd { get; set; }
    private System.Timers.Timer _timer;
    private AuthService authService;
    private HttpClient hc;
    public bool tmp;

    protected override async void OnInitialized()
    {
        authService = new AuthService(AuthenticationStateProvider);
        tmp = await authService.IsUserLoggedAsync();
        if (tmp)
        {
            Console.WriteLine("Usuario conectado");
            hc = new HttpClient();
            string id = await authService.GetUserIdAsync();
            Console.WriteLine("id: " + id);
            cd = await hc.GetFromJsonAsync<List<Device>>($"http://localhost:5088/api/Devices/{id}");

            // Configuring the timer
            _timer = new System.Timers.Timer(1000);
            // Set the interval to 5000 milliseconds (5 seconds)
            _timer.Elapsed += async (sender, e) =>
            {
                await UpdateCards();
            };
            _timer.AutoReset = true;
            _timer.Enabled = true;
        }
        else
        {
            Console.WriteLine("Usuario desconectado");
        }
        StateHasChanged();
    }

    private async Task UpdateCards()
    {
        tmp = await authService.IsUserLoggedAsync();
        Console.WriteLine(tmp);
        if (tmp)
        {
            string id = await authService.GetUserIdAsync();
            HttpClient hc = new HttpClient();
            cd = await hc.GetFromJsonAsync<List<Device>>($"http://localhost:5088/api/Devices/{id}");
            foreach(Device dvc in cd)
            {
                Console.WriteLine(dvc.id + " : " + dvc.status);
            }
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            _timer.Stop();
        }
    }
}